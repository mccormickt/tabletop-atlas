/* tslint:disable */
/* eslint-disable */
/**
 * Tabletop Atlas API
 * API for managing board games, house rules, and AI-powered chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ContextSource
 */
export interface ContextSource {
    /**
     * 
     * @type {string}
     * @memberof ContextSource
     */
    chunkText: string;
    /**
     * 
     * @type {number}
     * @memberof ContextSource
     */
    embeddingId: number;
    /**
     * 
     * @type {string}
     * @memberof ContextSource
     */
    metadata?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ContextSource
     */
    similarityScore: number;
    /**
     * 
     * @type {string}
     * @memberof ContextSource
     */
    sourceType: string;
}

/**
 * Check if a given object implements the ContextSource interface.
 */
export function instanceOfContextSource(value: object): value is ContextSource {
    if (!('chunkText' in value) || value['chunkText'] === undefined) return false;
    if (!('embeddingId' in value) || value['embeddingId'] === undefined) return false;
    if (!('similarityScore' in value) || value['similarityScore'] === undefined) return false;
    if (!('sourceType' in value) || value['sourceType'] === undefined) return false;
    return true;
}

export function ContextSourceFromJSON(json: any): ContextSource {
    return ContextSourceFromJSONTyped(json, false);
}

export function ContextSourceFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContextSource {
    if (json == null) {
        return json;
    }
    return {
        
        'chunkText': json['chunk_text'],
        'embeddingId': json['embedding_id'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'similarityScore': json['similarity_score'],
        'sourceType': json['source_type'],
    };
}

export function ContextSourceToJSON(json: any): ContextSource {
    return ContextSourceToJSONTyped(json, false);
}

export function ContextSourceToJSONTyped(value?: ContextSource | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chunk_text': value['chunkText'],
        'embedding_id': value['embeddingId'],
        'metadata': value['metadata'],
        'similarity_score': value['similarityScore'],
        'source_type': value['sourceType'],
    };
}

