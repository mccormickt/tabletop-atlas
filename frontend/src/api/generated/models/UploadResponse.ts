/* tslint:disable */
/* eslint-disable */
/**
 * Tabletop Atlas API
 * API for managing board games, house rules, and AI-powered chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UploadResponse
 */
export interface UploadResponse {
    /**
     * 
     * @type {number}
     * @memberof UploadResponse
     */
    chunksProcessed?: number | null;
    /**
     * 
     * @type {string}
     * @memberof UploadResponse
     */
    filePath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UploadResponse
     */
    message: string;
    /**
     * 
     * @type {number}
     * @memberof UploadResponse
     */
    textLength?: number | null;
}

/**
 * Check if a given object implements the UploadResponse interface.
 */
export function instanceOfUploadResponse(value: object): value is UploadResponse {
    if (!('message' in value) || value['message'] === undefined) return false;
    return true;
}

export function UploadResponseFromJSON(json: any): UploadResponse {
    return UploadResponseFromJSONTyped(json, false);
}

export function UploadResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): UploadResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'chunksProcessed': json['chunks_processed'] == null ? undefined : json['chunks_processed'],
        'filePath': json['file_path'] == null ? undefined : json['file_path'],
        'message': json['message'],
        'textLength': json['text_length'] == null ? undefined : json['text_length'],
    };
}

export function UploadResponseToJSON(json: any): UploadResponse {
    return UploadResponseToJSONTyped(json, false);
}

export function UploadResponseToJSONTyped(value?: UploadResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chunks_processed': value['chunksProcessed'],
        'file_path': value['filePath'],
        'message': value['message'],
        'text_length': value['textLength'],
    };
}

