/* tslint:disable */
/* eslint-disable */
/**
 * Tabletop Atlas API
 * API for managing board games, house rules, and AI-powered chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ChatSessionSummary } from './ChatSessionSummary';
import {
    ChatSessionSummaryFromJSON,
    ChatSessionSummaryFromJSONTyped,
    ChatSessionSummaryToJSON,
    ChatSessionSummaryToJSONTyped,
} from './ChatSessionSummary';

/**
 * 
 * @export
 * @interface PaginatedResponseForChatSessionSummary
 */
export interface PaginatedResponseForChatSessionSummary {
    /**
     * 
     * @type {Array<ChatSessionSummary>}
     * @memberof PaginatedResponseForChatSessionSummary
     */
    items: Array<ChatSessionSummary>;
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseForChatSessionSummary
     */
    limit: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseForChatSessionSummary
     */
    page: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseForChatSessionSummary
     */
    total: number;
    /**
     * 
     * @type {number}
     * @memberof PaginatedResponseForChatSessionSummary
     */
    totalPages: number;
}

/**
 * Check if a given object implements the PaginatedResponseForChatSessionSummary interface.
 */
export function instanceOfPaginatedResponseForChatSessionSummary(value: object): value is PaginatedResponseForChatSessionSummary {
    if (!('items' in value) || value['items'] === undefined) return false;
    if (!('limit' in value) || value['limit'] === undefined) return false;
    if (!('page' in value) || value['page'] === undefined) return false;
    if (!('total' in value) || value['total'] === undefined) return false;
    if (!('totalPages' in value) || value['totalPages'] === undefined) return false;
    return true;
}

export function PaginatedResponseForChatSessionSummaryFromJSON(json: any): PaginatedResponseForChatSessionSummary {
    return PaginatedResponseForChatSessionSummaryFromJSONTyped(json, false);
}

export function PaginatedResponseForChatSessionSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PaginatedResponseForChatSessionSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'items': ((json['items'] as Array<any>).map(ChatSessionSummaryFromJSON)),
        'limit': json['limit'],
        'page': json['page'],
        'total': json['total'],
        'totalPages': json['total_pages'],
    };
}

export function PaginatedResponseForChatSessionSummaryToJSON(json: any): PaginatedResponseForChatSessionSummary {
    return PaginatedResponseForChatSessionSummaryToJSONTyped(json, false);
}

export function PaginatedResponseForChatSessionSummaryToJSONTyped(value?: PaginatedResponseForChatSessionSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'items': ((value['items'] as Array<any>).map(ChatSessionSummaryToJSON)),
        'limit': value['limit'],
        'page': value['page'],
        'total': value['total'],
        'total_pages': value['totalPages'],
    };
}

