/* tslint:disable */
/* eslint-disable */
/**
 * Tabletop Atlas API
 * API for managing board games, house rules, and AI-powered chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Game
 */
export interface Game {
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    bggId?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    complexityRating?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof Game
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    description?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    maxPlayers?: number | null;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    minPlayers?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    playTimeMinutes?: number | null;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    publisher?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    rulesPdfPath?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Game
     */
    rulesText?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof Game
     */
    updatedAt: Date;
    /**
     * 
     * @type {number}
     * @memberof Game
     */
    yearPublished?: number | null;
}

/**
 * Check if a given object implements the Game interface.
 */
export function instanceOfGame(value: object): value is Game {
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function GameFromJSON(json: any): Game {
    return GameFromJSONTyped(json, false);
}

export function GameFromJSONTyped(json: any, ignoreDiscriminator: boolean): Game {
    if (json == null) {
        return json;
    }
    return {
        
        'bggId': json['bgg_id'] == null ? undefined : json['bgg_id'],
        'complexityRating': json['complexity_rating'] == null ? undefined : json['complexity_rating'],
        'createdAt': (new Date(json['created_at'])),
        'description': json['description'] == null ? undefined : json['description'],
        'id': json['id'],
        'maxPlayers': json['max_players'] == null ? undefined : json['max_players'],
        'minPlayers': json['min_players'] == null ? undefined : json['min_players'],
        'name': json['name'],
        'playTimeMinutes': json['play_time_minutes'] == null ? undefined : json['play_time_minutes'],
        'publisher': json['publisher'] == null ? undefined : json['publisher'],
        'rulesPdfPath': json['rules_pdf_path'] == null ? undefined : json['rules_pdf_path'],
        'rulesText': json['rules_text'] == null ? undefined : json['rules_text'],
        'updatedAt': (new Date(json['updated_at'])),
        'yearPublished': json['year_published'] == null ? undefined : json['year_published'],
    };
}

export function GameToJSON(json: any): Game {
    return GameToJSONTyped(json, false);
}

export function GameToJSONTyped(value?: Game | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'bgg_id': value['bggId'],
        'complexity_rating': value['complexityRating'],
        'created_at': ((value['createdAt']).toISOString()),
        'description': value['description'],
        'id': value['id'],
        'max_players': value['maxPlayers'],
        'min_players': value['minPlayers'],
        'name': value['name'],
        'play_time_minutes': value['playTimeMinutes'],
        'publisher': value['publisher'],
        'rules_pdf_path': value['rulesPdfPath'],
        'rules_text': value['rulesText'],
        'updated_at': ((value['updatedAt']).toISOString()),
        'year_published': value['yearPublished'],
    };
}

