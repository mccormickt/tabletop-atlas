/* tslint:disable */
/* eslint-disable */
/**
 * Tabletop Atlas API
 * API for managing board games, house rules, and AI-powered chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageRole } from './MessageRole';
import {
    MessageRoleFromJSON,
    MessageRoleFromJSONTyped,
    MessageRoleToJSON,
    MessageRoleToJSONTyped,
} from './MessageRole';

/**
 * 
 * @export
 * @interface ChatMessage
 */
export interface ChatMessage {
    /**
     * 
     * @type {string}
     * @memberof ChatMessage
     */
    content: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof ChatMessage
     */
    contextChunks?: Array<number> | null;
    /**
     * 
     * @type {Date}
     * @memberof ChatMessage
     */
    createdAt: Date;
    /**
     * 
     * @type {number}
     * @memberof ChatMessage
     */
    id: number;
    /**
     * 
     * @type {MessageRole}
     * @memberof ChatMessage
     */
    role: MessageRole;
    /**
     * 
     * @type {number}
     * @memberof ChatMessage
     */
    sessionId: number;
}



/**
 * Check if a given object implements the ChatMessage interface.
 */
export function instanceOfChatMessage(value: object): value is ChatMessage {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('sessionId' in value) || value['sessionId'] === undefined) return false;
    return true;
}

export function ChatMessageFromJSON(json: any): ChatMessage {
    return ChatMessageFromJSONTyped(json, false);
}

export function ChatMessageFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChatMessage {
    if (json == null) {
        return json;
    }
    return {
        
        'content': json['content'],
        'contextChunks': json['context_chunks'] == null ? undefined : json['context_chunks'],
        'createdAt': (new Date(json['created_at'])),
        'id': json['id'],
        'role': MessageRoleFromJSON(json['role']),
        'sessionId': json['session_id'],
    };
}

export function ChatMessageToJSON(json: any): ChatMessage {
    return ChatMessageToJSONTyped(json, false);
}

export function ChatMessageToJSONTyped(value?: ChatMessage | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'content': value['content'],
        'context_chunks': value['contextChunks'],
        'created_at': ((value['createdAt']).toISOString()),
        'id': value['id'],
        'role': MessageRoleToJSON(value['role']),
        'session_id': value['sessionId'],
    };
}

