/* tslint:disable */
/* eslint-disable */
/**
 * Tabletop Atlas API
 * API for managing board games, house rules, and AI-powered chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RulesInfoResponse
 */
export interface RulesInfoResponse {
    /**
     * 
     * @type {number}
     * @memberof RulesInfoResponse
     */
    chunkCount: number;
    /**
     * 
     * @type {number}
     * @memberof RulesInfoResponse
     */
    gameId: number;
    /**
     * 
     * @type {string}
     * @memberof RulesInfoResponse
     */
    gameName: string;
    /**
     * 
     * @type {boolean}
     * @memberof RulesInfoResponse
     */
    hasRulesPdf: boolean;
    /**
     * 
     * @type {string}
     * @memberof RulesInfoResponse
     */
    lastProcessed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RulesInfoResponse
     */
    rulesPdfPath?: string | null;
    /**
     * 
     * @type {number}
     * @memberof RulesInfoResponse
     */
    textLength?: number | null;
}

/**
 * Check if a given object implements the RulesInfoResponse interface.
 */
export function instanceOfRulesInfoResponse(value: object): value is RulesInfoResponse {
    if (!('chunkCount' in value) || value['chunkCount'] === undefined) return false;
    if (!('gameId' in value) || value['gameId'] === undefined) return false;
    if (!('gameName' in value) || value['gameName'] === undefined) return false;
    if (!('hasRulesPdf' in value) || value['hasRulesPdf'] === undefined) return false;
    return true;
}

export function RulesInfoResponseFromJSON(json: any): RulesInfoResponse {
    return RulesInfoResponseFromJSONTyped(json, false);
}

export function RulesInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RulesInfoResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'chunkCount': json['chunk_count'],
        'gameId': json['game_id'],
        'gameName': json['game_name'],
        'hasRulesPdf': json['has_rules_pdf'],
        'lastProcessed': json['last_processed'] == null ? undefined : json['last_processed'],
        'rulesPdfPath': json['rules_pdf_path'] == null ? undefined : json['rules_pdf_path'],
        'textLength': json['text_length'] == null ? undefined : json['text_length'],
    };
}

export function RulesInfoResponseToJSON(json: any): RulesInfoResponse {
    return RulesInfoResponseToJSONTyped(json, false);
}

export function RulesInfoResponseToJSONTyped(value?: RulesInfoResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'chunk_count': value['chunkCount'],
        'game_id': value['gameId'],
        'game_name': value['gameName'],
        'has_rules_pdf': value['hasRulesPdf'],
        'last_processed': value['lastProcessed'],
        'rules_pdf_path': value['rulesPdfPath'],
        'text_length': value['textLength'],
    };
}

