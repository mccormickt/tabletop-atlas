/* tslint:disable */
/* eslint-disable */
/**
 * Tabletop Atlas API
 * API for managing board games, house rules, and AI-powered chat
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ChatHistory,
  ChatRequest,
  ChatResponse,
  ChatSession,
  CreateChatSessionRequest,
  CreateGameRequest,
  CreateHouseRuleRequest,
  DeleteRulesResponse,
  Game,
  HouseRule,
  PaginatedResponseForChatSessionSummary,
  PaginatedResponseForGameSummary,
  PaginatedResponseForHouseRule,
  RulesInfoResponse,
  RulesSearchResponse,
  UpdateGameRequest,
  UpdateHouseRuleRequest,
  UploadResponse,
} from '../models/index';
import {
    ChatHistoryFromJSON,
    ChatHistoryToJSON,
    ChatRequestFromJSON,
    ChatRequestToJSON,
    ChatResponseFromJSON,
    ChatResponseToJSON,
    ChatSessionFromJSON,
    ChatSessionToJSON,
    CreateChatSessionRequestFromJSON,
    CreateChatSessionRequestToJSON,
    CreateGameRequestFromJSON,
    CreateGameRequestToJSON,
    CreateHouseRuleRequestFromJSON,
    CreateHouseRuleRequestToJSON,
    DeleteRulesResponseFromJSON,
    DeleteRulesResponseToJSON,
    GameFromJSON,
    GameToJSON,
    HouseRuleFromJSON,
    HouseRuleToJSON,
    PaginatedResponseForChatSessionSummaryFromJSON,
    PaginatedResponseForChatSessionSummaryToJSON,
    PaginatedResponseForGameSummaryFromJSON,
    PaginatedResponseForGameSummaryToJSON,
    PaginatedResponseForHouseRuleFromJSON,
    PaginatedResponseForHouseRuleToJSON,
    RulesInfoResponseFromJSON,
    RulesInfoResponseToJSON,
    RulesSearchResponseFromJSON,
    RulesSearchResponseToJSON,
    UpdateGameRequestFromJSON,
    UpdateGameRequestToJSON,
    UpdateHouseRuleRequestFromJSON,
    UpdateHouseRuleRequestToJSON,
    UploadResponseFromJSON,
    UploadResponseToJSON,
} from '../models/index';

export interface ChatWithRulesRequest {
    chatRequest: ChatRequest;
}

export interface CreateChatSessionOperationRequest {
    createChatSessionRequest: CreateChatSessionRequest;
}

export interface CreateGameOperationRequest {
    createGameRequest: CreateGameRequest;
}

export interface CreateHouseRuleOperationRequest {
    createHouseRuleRequest: CreateHouseRuleRequest;
}

export interface DeleteGameRequest {
    id: number;
}

export interface DeleteHouseRuleRequest {
    id: number;
}

export interface DeleteRulesRequest {
    id: number;
}

export interface GetChatSessionRequest {
    id: number;
}

export interface GetGameRequest {
    id: number;
}

export interface GetHouseRuleRequest {
    id: number;
}

export interface GetRulesInfoRequest {
    id: number;
}

export interface ListChatSessionsRequest {
    gameId: number;
    limit?: number;
    page?: number;
}

export interface ListGamesRequest {
    limit?: number;
    page?: number;
}

export interface ListHouseRulesRequest {
    gameId: number;
    limit?: number;
    page?: number;
}

export interface SearchRulesRequest {
    gameId: number;
    query: string;
    limit?: number | null;
}

export interface UpdateGameOperationRequest {
    id: number;
    updateGameRequest: UpdateGameRequest;
}

export interface UpdateHouseRuleOperationRequest {
    id: number;
    updateHouseRuleRequest: UpdateHouseRuleRequest;
}

export interface UploadRulesPdfRequest {
    id: number;
    body: Blob;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Send a message and get AI response
     */
    async chatWithRulesRaw(requestParameters: ChatWithRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatResponse>> {
        if (requestParameters['chatRequest'] == null) {
            throw new runtime.RequiredError(
                'chatRequest',
                'Required parameter "chatRequest" was null or undefined when calling chatWithRules().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/chat/message`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ChatRequestToJSON(requestParameters['chatRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatResponseFromJSON(jsonValue));
    }

    /**
     * Send a message and get AI response
     */
    async chatWithRules(requestParameters: ChatWithRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatResponse> {
        const response = await this.chatWithRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new chat session
     */
    async createChatSessionRaw(requestParameters: CreateChatSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatSession>> {
        if (requestParameters['createChatSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'createChatSessionRequest',
                'Required parameter "createChatSessionRequest" was null or undefined when calling createChatSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/chat/sessions`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateChatSessionRequestToJSON(requestParameters['createChatSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatSessionFromJSON(jsonValue));
    }

    /**
     * Create a new chat session
     */
    async createChatSession(requestParameters: CreateChatSessionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatSession> {
        const response = await this.createChatSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new game
     */
    async createGameRaw(requestParameters: CreateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters['createGameRequest'] == null) {
            throw new runtime.RequiredError(
                'createGameRequest',
                'Required parameter "createGameRequest" was null or undefined when calling createGame().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/games`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateGameRequestToJSON(requestParameters['createGameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Create a new game
     */
    async createGame(requestParameters: CreateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Game> {
        const response = await this.createGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new house rule
     */
    async createHouseRuleRaw(requestParameters: CreateHouseRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HouseRule>> {
        if (requestParameters['createHouseRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'createHouseRuleRequest',
                'Required parameter "createHouseRuleRequest" was null or undefined when calling createHouseRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/house-rules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateHouseRuleRequestToJSON(requestParameters['createHouseRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HouseRuleFromJSON(jsonValue));
    }

    /**
     * Create a new house rule
     */
    async createHouseRule(requestParameters: CreateHouseRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HouseRule> {
        const response = await this.createHouseRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a game
     */
    async deleteGameRaw(requestParameters: DeleteGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteGame().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a game
     */
    async deleteGame(requestParameters: DeleteGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteGameRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a house rule
     */
    async deleteHouseRuleRaw(requestParameters: DeleteHouseRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteHouseRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/house-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a house rule
     */
    async deleteHouseRule(requestParameters: DeleteHouseRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteHouseRuleRaw(requestParameters, initOverrides);
    }

    /**
     * Delete uploaded rules for a game
     */
    async deleteRulesRaw(requestParameters: DeleteRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteRulesResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteRules().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{id}/rules`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteRulesResponseFromJSON(jsonValue));
    }

    /**
     * Delete uploaded rules for a game
     */
    async deleteRules(requestParameters: DeleteRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteRulesResponse> {
        const response = await this.deleteRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific chat session with its message history
     */
    async getChatSessionRaw(requestParameters: GetChatSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ChatHistory>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getChatSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chat/sessions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ChatHistoryFromJSON(jsonValue));
    }

    /**
     * Get a specific chat session with its message history
     */
    async getChatSession(requestParameters: GetChatSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ChatHistory> {
        const response = await this.getChatSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific game by ID
     */
    async getGameRaw(requestParameters: GetGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getGame().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Get a specific game by ID
     */
    async getGame(requestParameters: GetGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Game> {
        const response = await this.getGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a specific house rule by ID
     */
    async getHouseRuleRaw(requestParameters: GetHouseRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HouseRule>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getHouseRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/house-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HouseRuleFromJSON(jsonValue));
    }

    /**
     * Get a specific house rule by ID
     */
    async getHouseRule(requestParameters: GetHouseRuleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HouseRule> {
        const response = await this.getHouseRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get information about uploaded rules for a game
     */
    async getRulesInfoRaw(requestParameters: GetRulesInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RulesInfoResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getRulesInfo().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games/{id}/rules-info`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesInfoResponseFromJSON(jsonValue));
    }

    /**
     * Get information about uploaded rules for a game
     */
    async getRulesInfo(requestParameters: GetRulesInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RulesInfoResponse> {
        const response = await this.getRulesInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check endpoint
     */
    async healthCheckRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/health`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Health check endpoint
     */
    async healthCheck(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.healthCheckRaw(initOverrides);
        return await response.value();
    }

    /**
     * List chat sessions for a specific game
     */
    async listChatSessionsRaw(requestParameters: ListChatSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseForChatSessionSummary>> {
        if (requestParameters['gameId'] == null) {
            throw new runtime.RequiredError(
                'gameId',
                'Required parameter "gameId" was null or undefined when calling listChatSessions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['gameId'] != null) {
            queryParameters['game_id'] = requestParameters['gameId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chat/sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseForChatSessionSummaryFromJSON(jsonValue));
    }

    /**
     * List chat sessions for a specific game
     */
    async listChatSessions(requestParameters: ListChatSessionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseForChatSessionSummary> {
        const response = await this.listChatSessionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all games with pagination
     */
    async listGamesRaw(requestParameters: ListGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseForGameSummary>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/games`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseForGameSummaryFromJSON(jsonValue));
    }

    /**
     * List all games with pagination
     */
    async listGames(requestParameters: ListGamesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseForGameSummary> {
        const response = await this.listGamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List house rules for a specific game
     */
    async listHouseRulesRaw(requestParameters: ListHouseRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedResponseForHouseRule>> {
        if (requestParameters['gameId'] == null) {
            throw new runtime.RequiredError(
                'gameId',
                'Required parameter "gameId" was null or undefined when calling listHouseRules().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['gameId'] != null) {
            queryParameters['game_id'] = requestParameters['gameId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/house-rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedResponseForHouseRuleFromJSON(jsonValue));
    }

    /**
     * List house rules for a specific game
     */
    async listHouseRules(requestParameters: ListHouseRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedResponseForHouseRule> {
        const response = await this.listHouseRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search rules text for a specific game using embedding similarity
     */
    async searchRulesRaw(requestParameters: SearchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RulesSearchResponse>> {
        if (requestParameters['gameId'] == null) {
            throw new runtime.RequiredError(
                'gameId',
                'Required parameter "gameId" was null or undefined when calling searchRules().'
            );
        }

        if (requestParameters['query'] == null) {
            throw new runtime.RequiredError(
                'query',
                'Required parameter "query" was null or undefined when calling searchRules().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['gameId'] != null) {
            queryParameters['game_id'] = requestParameters['gameId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/chat/search-rules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RulesSearchResponseFromJSON(jsonValue));
    }

    /**
     * Search rules text for a specific game using embedding similarity
     */
    async searchRules(requestParameters: SearchRulesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RulesSearchResponse> {
        const response = await this.searchRulesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing game
     */
    async updateGameRaw(requestParameters: UpdateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Game>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateGame().'
            );
        }

        if (requestParameters['updateGameRequest'] == null) {
            throw new runtime.RequiredError(
                'updateGameRequest',
                'Required parameter "updateGameRequest" was null or undefined when calling updateGame().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/games/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateGameRequestToJSON(requestParameters['updateGameRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameFromJSON(jsonValue));
    }

    /**
     * Update an existing game
     */
    async updateGame(requestParameters: UpdateGameOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Game> {
        const response = await this.updateGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an existing house rule
     */
    async updateHouseRuleRaw(requestParameters: UpdateHouseRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HouseRule>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateHouseRule().'
            );
        }

        if (requestParameters['updateHouseRuleRequest'] == null) {
            throw new runtime.RequiredError(
                'updateHouseRuleRequest',
                'Required parameter "updateHouseRuleRequest" was null or undefined when calling updateHouseRule().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/house-rules/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateHouseRuleRequestToJSON(requestParameters['updateHouseRuleRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HouseRuleFromJSON(jsonValue));
    }

    /**
     * Update an existing house rule
     */
    async updateHouseRule(requestParameters: UpdateHouseRuleOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HouseRule> {
        const response = await this.updateHouseRuleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a PDF rules document for a game
     */
    async uploadRulesPdfRaw(requestParameters: UploadRulesPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UploadResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uploadRulesPdf().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling uploadRulesPdf().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/octet-stream';

        const response = await this.request({
            path: `/api/games/{id}/rules-upload`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UploadResponseFromJSON(jsonValue));
    }

    /**
     * Upload a PDF rules document for a game
     */
    async uploadRulesPdf(requestParameters: UploadRulesPdfRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UploadResponse> {
        const response = await this.uploadRulesPdfRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
